# -*- coding: utf-8 -*-
"""6_419x_Module3_Part3_Co_offended_network_v2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YBwM51HdeHylpP6rFIGfL20Wa2iLs0bT
"""

import pandas as pd
#df = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/Cooffending.csv")
df = pd.read_csv("Cooffending/Cooffending.csv")
print(len(df))

#from google.colab import drive
#drive.mount('/content/drive')

df2 = df.drop_duplicates(subset=["OffenderIdentifier", "CrimeIdentifier"])
offenders_unique = df2["OffenderIdentifier"].drop_duplicates()
crimes_unique = df2["CrimeIdentifier"].drop_duplicates()
df_crimes_unique = df.drop_duplicates(subset=["CrimeIdentifier"])
df_offenders_unique = df.drop_duplicates(subset=["OffenderIdentifier"])

from collections import Counter
crime_years = list(df_crimes_unique["CrimeYear"])
crime_year_counter = Counter(crime_years)

df_crimes_unique['number of offenders'] = df_crimes_unique["NumberYouthOffenders"] + df_crimes_unique["NumberAdultOffenders"]
the_worst_crime_index = df_crimes_unique["number of offenders"].argmax()
print("CrimeIdentifier:", df_crimes_unique.iloc[the_worst_crime_index]["CrimeIdentifier"])
print("Number_of_offenders:", df_crimes_unique.iloc[the_worst_crime_index]["number of offenders"])
print("Municipality:", df_crimes_unique.iloc[the_worst_crime_index]["Municipality"])

offenders = list(df_crimes_unique["OffenderIdentifier"])

offenders_counter = Counter(offenders)
print(crime_year_counter.most_common(1))
print(offenders_counter.most_common(1))

# crime_matrix has offenders and crimes as its rows and columns
import numpy as np
offenders = np.array(offenders_unique)  #539593
crimes = np.array(crimes_unique)        #1164836
crimes_unique_matrix = np.array(df_crimes_unique)       #(1164836, 14)
offenders_unique_matrix = np.array(df_offenders_unique) #(539593, 13)
print(158110 in list(df["OffenderIdentifier"]))
print(df2[df2["OffenderIdentifier"] == 158110])
df2_matrix = np.array(df2)
print(offenders.shape)
print(crimes.shape)
print(crimes_unique_matrix.shape)
print(offenders_unique_matrix.shape)
print(df2_matrix[:, 0].shape[0])

from scipy.sparse import csr_matrix
import networkx as nx
row = df2_matrix[:, 0] #offenders
col = (df2_matrix[:, 2].astype(int)) #crimes
vals = np.ones(df2_matrix.shape[0])
crime_matrix = csr_matrix((vals, (row, col)), shape=(row.max() + 1, col.max() + 1))

cooffend_matrix = crime_matrix @ crime_matrix.T
cooffend_matrix[cooffend_matrix > 0] = 1
cooffend_matrix.setdiag(0)
cooffend_matrix.eliminate_zeros() # To avoid self loops since setdiag(0) does not itself change the sparsity pattern

G = nx.from_scipy_sparse_matrix(cooffend_matrix)
print(len(G.nodes))
print(len(list(nx.isolates(G))))
print(len(G.edges))

"""Part f"""

G.remove_nodes_from(list(nx.isolates(G)))

degrees = np.array(sorted([d for n, d in G.degree()], reverse=True))
print("Mean degree:", degrees.mean())
print("Degree above 100:", len(degrees[degrees >= 100]))
connected_comps = sorted(nx.connected_components(G), key=len, reverse=True)
print("N of connected components:", len(connected_comps))

"""Part h"""

print(len(connected_comps[0]))

"""Part i"""

from scipy.sparse import csr_matrix
import networkx as nx
row = df2_matrix[:, 0] #offenders
col = (df2_matrix[:, 2].astype(int)) #crimes
vals = np.ones(df2_matrix.shape[0])
crime_matrix = csr_matrix((vals, (row, col)), shape=(row.max() + 1, col.max() + 1))


cooffend_matrix = crime_matrix @ crime_matrix.T
cooffend_matrix[cooffend_matrix >= 2] = 1
cooffend_matrix[cooffend_matrix < 2] = 0
cooffend_matrix.setdiag(0)
cooffend_matrix.eliminate_zeros() # To avoid self loops since setdiag(0) does not itself change the sparsity pattern


G = nx.from_scipy_sparse_matrix(cooffend_matrix)
#edge_weights = nx.get_edge_attributes(G,'weight')
#print(len(G.nodes))
#G.remove_edges_from((e for e, w in edge_weights.items() if w >= 2))
G.remove_nodes_from(list(nx.isolates(G)))
print("Gn:", len(G.nodes))

cooffend_matrix = crime_matrix @ crime_matrix.T
cooffend_matrix[cooffend_matrix == 1] = 1
cooffend_matrix.setdiag(0)
cooffend_matrix.eliminate_zeros()

G = nx.from_scipy_sparse_matrix(cooffend_matrix)
#edge_weights = nx.get_edge_attributes(G,'weight')
#print(len(G.nodes))
#G.remove_edges_from((e for e, w in edge_weights.items() if w ==1))
G.remove_nodes_from(list(nx.isolates(G)))
print("Gnr:", len(G.nodes))